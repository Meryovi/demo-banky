/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/accounts/{clientId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get all accounts attached to a client */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          clientId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Response"];
          };
        };
      };
    };
    put?: never;
    /** @description Open a new account for a client */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          clientId: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Request"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Response2"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": string[];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/accounts/{clientId}/{accountId}/transfer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Transfer a given amount between accounts */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          clientId: string;
          accountId: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Request2"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Response3"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": string[];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/accounts/{clientId}/{accountId}/close": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Close an account */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          clientId: string;
          accountId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Response4"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": string[];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/accounts/{clientId}/{accountId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** @description Update an account */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          clientId: string;
          accountId: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Request3"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Response5"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": string[];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/clients": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get all clients */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Response6"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/clients/{clientId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get a client by its ID */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          clientId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Response7"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** @description Update a client's profile by its ID */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          clientId: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Request4"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Response8"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": string[];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AccountDto: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      clientId: string;
      type: components["schemas"]["AccountType"];
      name: string;
      /** Format: double */
      balance: number;
      isClosed: boolean;
      /** Format: date-time */
      createdOnUtc: string;
      /** Format: date-time */
      closedOnUtc: string | null;
    };
    AccountType: number;
    ClientDto: {
      /** Format: uuid */
      id: string;
      type: components["schemas"]["ClientType"];
      name: string;
      lastName: string | null;
      email: string;
      /** Format: date-time */
      birthDate: string | null;
      /** Format: date-time */
      createdOnUtc: string;
      /** Format: date-time */
      updatedOnUtc: string | null;
    };
    ClientType: number;
    /** OpenAccountRequest */
    Request: {
      accountName: string;
      type: components["schemas"]["AccountType"];
      /** Format: double */
      initialBalance: number;
    };
    /** TransferBetweenAccountsRequest */
    Request2: {
      /** Format: uuid */
      toAccountId: string;
      /** Format: double */
      amount: number;
    };
    /** UpdateAccountRequest */
    Request3: {
      name: string;
    };
    /** UpdateClientRequest */
    Request4: {
      name: string;
      lastName: string | null;
      email: string;
      /** Format: date-time */
      birthDate: string | null;
    };
    /** GetClientAccountsResponse */
    Response: {
      accounts: components["schemas"]["AccountDto"][];
    };
    /** OpenAccountResponse */
    Response2: {
      account: components["schemas"]["AccountDto"];
    };
    /** TransferBetweenAccountsResponse */
    Response3: {
      account: components["schemas"]["AccountDto"];
    };
    /** CloseAccountResponse */
    Response4: {
      account: components["schemas"]["AccountDto"];
    };
    /** UpdateAccountResponse */
    Response5: {
      account: components["schemas"]["AccountDto"];
    };
    /** GetAllClientsResponse */
    Response6: {
      clients: components["schemas"]["ClientDto"][];
    };
    /** GetClientResponse */
    Response7: {
      client: components["schemas"]["ClientDto"];
    };
    /** UpdateClientResponse */
    Response8: {
      client: components["schemas"]["ClientDto"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
